{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst dateTimePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('button[data-start]');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\nlet timerInterval;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nstartButton.addEventListener('click', () => {\n  startButton.disabled = true;\n  dateTimePicker.disabled = true;\n  timerInterval = setInterval(updateTimer, 1000);\n});\n\nfunction updateTimer() {\n  const now = new Date();\n  const timeRemaining = userSelectedDate - now;\n\n  if (timeRemaining <= 0) {\n    clearInterval(timerInterval);\n    dateTimePicker.disabled = false;\n    return;\n  }\n\n  const timeComponents = convertMs(timeRemaining);\n  updateInterface(timeComponents);\n}\n\nfunction updateInterface({ days, hours, minutes, seconds }) {\n  daysValue.textContent = addLeadingZero(days);\n  hoursValue.textContent = addLeadingZero(hours);\n  minutesValue.textContent = addLeadingZero(minutes);\n  secondsValue.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["dateTimePicker","startButton","daysValue","hoursValue","minutesValue","secondsValue","userSelectedDate","timerInterval","options","selectedDates","iziToast","flatpickr","updateTimer","timeRemaining","timeComponents","convertMs","updateInterface","days","hours","minutes","seconds","addLeadingZero","value","ms"],"mappings":"0IAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAC9BH,GAAoB,IAAI,MAC1BI,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDT,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAU,EAAUX,EAAgBQ,CAAO,EAEjCP,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvBD,EAAe,SAAW,GAC1BO,EAAgB,YAAYK,EAAa,GAAI,CAC/C,CAAC,EAED,SAASA,GAAc,CAErB,MAAMC,EAAgBP,EADV,IAAI,KAGhB,GAAIO,GAAiB,EAAG,CACtB,cAAcN,CAAa,EAC3BP,EAAe,SAAW,GAC1B,MACD,CAED,MAAMc,EAAiBC,EAAUF,CAAa,EAC9CG,EAAgBF,CAAc,CAChC,CAEA,SAASE,EAAgB,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC1DlB,EAAU,YAAcmB,EAAeJ,CAAI,EAC3Cd,EAAW,YAAckB,EAAeH,CAAK,EAC7Cd,EAAa,YAAciB,EAAeF,CAAO,EACjDd,EAAa,YAAcgB,EAAeD,CAAO,CACnD,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASP,EAAUQ,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}